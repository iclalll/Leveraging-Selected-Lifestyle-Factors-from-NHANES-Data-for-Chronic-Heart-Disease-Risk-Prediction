# -*- coding: utf-8 -*-
"""Leveraging Selected Lifestyle Factors from  NHANES Data for Chronic Heart Disease Risk  Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ffDYuimSMZRc3OsISRNZ_3V7LkWtRkLz
"""

# 📦 Gerekli Kütüphaneleri Yükle
!pip install -q kaggle

# 🔑 Kaggle API anahtarını Colab'a yükle
import os
import json

kaggle_token = {
    "username": "KAGGLE_USERNAMEİN",
    "key": "KAGGLE_KEYİN"
}

# Kullanıcı bilgilerini json dosyasına yaz
with open('/root/.kaggle/kaggle.json', 'w') as file:
    json.dump(kaggle_token, file)

os.chmod('/root/.kaggle/kaggle.json', 600)

# 📥 Veri setini indir
!kaggle datasets download -d fedesoriano/heart-failure-prediction

# 🗃️ ZIP dosyasını çıkar
!unzip -o heart-failure-prediction.zip

# 📁 Klasörü oluştur
import os
import json

os.makedirs("/root/.kaggle", exist_ok=True)  # ← Bu satır klasörü oluşturur

# 👇 BURAYA kendi kaggle.json içeriğini yapıştır
kaggle_token = {
    "username": "senin_kaggle_username",
    "key": "senin_kaggle_key"
}

# 🔐 JSON dosyasını yaz ve izinleri ayarla
with open('/root/.kaggle/kaggle.json', 'w') as file:
    json.dump(kaggle_token, file)

os.chmod('/root/.kaggle/kaggle.json', 600)



# 📦 Gerekli Kütüphaneleri Yükle
!pip install -q kaggle

# 🔑 Kaggle API anahtarını Colab'a yükle
import os
import json

kaggle_token = {
    "username": "KAGGLE_USERNAMEİN",
    "key": "KAGGLE_KEYİN"
}

# Kullanıcı bilgilerini json dosyasına yaz
with open('/root/.kaggle/kaggle.json', 'w') as file:
    json.dump(kaggle_token, file)

os.chmod('/root/.kaggle/kaggle.json', 600)

# 📥 Veri setini indir
!kaggle datasets download -d fedesoriano/heart-failure-prediction

# 🗃️ ZIP dosyasını çıkar
!unzip -o heart-failure-prediction.zip

# 1. Gerekli klasörü oluştur
!mkdir -p ~/.kaggle

# 2. Kaggle json dosyasını yükle
from google.colab import files
uploaded = files.upload()  # ← bilgisayarından `kaggle.json` dosyasını tekrar yükle

# 3. Dosyayı doğru yere taşı ve izinleri ayarla
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# 4. Veri setini indir (Bu adım önemli)
!kaggle datasets download -d fedesoriano/heart-failure-prediction

# 5. ZIP dosyasını çıkar
!unzip -o heart-failure-prediction.zip

import pandas as pd

# Veriyi yükle
df = pd.read_csv("heart.csv")

# İlk 5 satırı göster
df.head()

from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

# Kategorik değişkenleri etiketle
categorical_cols = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
df_encoded = df.copy()
le = LabelEncoder()

for col in categorical_cols:
    df_encoded[col] = le.fit_transform(df_encoded[col])

# Veri seti artık sayısal hale geldi
df_encoded.head()



sns.countplot(data=df_encoded, x="HeartDisease")
plt.title("Heart Disease Sınıf Dağılımı")
plt.show()

from sklearn.model_selection import train_test_split

# Özellikleri (X) ve hedef değişkeni (y) ayır
X = df_encoded.drop('HeartDisease', axis=1)
y = df_encoded['HeartDisease']

# Eğitim ve test setlerini ayır (80% eğitim, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, RocCurveDisplay

# Modelleri tanımla
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
}

# Eğitim ve değerlendirme
for name, model in models.items():
    print(f"\n🔍 Model: {name}")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(classification_report(y_test, y_pred))
    print("ROC AUC:", roc_auc_score(y_test, y_pred))

    # ROC eğrisi
    RocCurveDisplay.from_estimator(model, X_test, y_test)
    plt.title(f"ROC Curve - {name}")
    plt.show()

importances = models["XGBoost"].feature_importances_
features = X.columns
importance_df = pd.DataFrame({"Feature": features, "Importance": importances})
importance_df.sort_values("Importance", ascending=False, inplace=True)

# Görselleştirme
plt.figure(figsize=(10, 6))
sns.barplot(x="Importance", y="Feature", data=importance_df)
plt.title("XGBoost Feature Importance")
plt.show()